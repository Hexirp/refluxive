-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/myuon/refluxive#readme</a>
@package refluxive
@version 0.1.0.0

module Graphics.UI.Refluxive.Graphical
data Graphical
data RenderState
RenderState :: Color -> Pos -> Pos -> RenderState
[color] :: RenderState -> Color
[coordinate] :: RenderState -> Pos
[scaler] :: RenderState -> Pos
defRenderState :: RenderState
empty :: Graphical
text :: Text -> Graphical
gridLayout :: Pos -> Graphical -> Graphical
rectangle :: Pos -> Pos -> Graphical
rectangleWith :: IncludeAssoc ShapeStyle xs => Record xs -> Pos -> Pos -> Graphical
colored :: Color -> Graphical -> Graphical
translate :: Pos -> Graphical -> Graphical
graphics :: [Graphical] -> Graphical
clip :: Pos -> Graphical -> Graphical
viewInfo :: String -> Graphical -> Graphical
render :: MonadIO m => Color -> Maybe Font -> Renderer -> Graphical -> (RenderState -> String -> m ()) -> m ()

module Graphics.UI.Refluxive.Component
class KnownSymbol a => Component m a | a -> m where {
    type family ModelParam a;
    data family Model a;
    data family Signal a;
}
uid :: Component m a => proxy a -> String
newModel :: (Component m a, MonadIO m) => ModelParam a -> m (Model a)
initComponent :: (Component m a, MonadIO m) => ComponentView a -> m ()
getGraphical :: (Component m a, MonadIO m) => Model a -> m Graphical
data ComponentView a
ComponentView :: Model a -> String -> IORef RenderState -> ComponentView a
[model] :: ComponentView a -> Model a
[name] :: ComponentView a -> String
[renderStateRef] :: ComponentView a -> IORef RenderState
data Watcher m tgt
Watcher :: (ComponentView src) -> (RenderState -> Signal src -> StateT (Model tgt) m ()) -> Watcher m tgt
getModel :: ComponentView a -> Model a

module Graphics.UI.Refluxive
class KnownSymbol a => Component m a | a -> m where {
    type family ModelParam a;
    data family Model a;
    data family Signal a;
}
uid :: Component m a => proxy a -> String
newModel :: (Component m a, MonadIO m) => ModelParam a -> m (Model a)
initComponent :: (Component m a, MonadIO m) => ComponentView a -> m ()
getGraphical :: (Component m a, MonadIO m) => Model a -> m Graphical
data ComponentView a
data Watcher m tgt
getModel :: ComponentView a -> Model a
builtIn :: Lens' UIState (ComponentView "builtin")
data UI a
runUI :: UI () -> IO ()
register :: Component UI a => ComponentView a -> UI ()
emit :: Component UI a => ComponentView a -> Signal a -> UI ()
watch :: (Component UI src, Component UI tgt) => ComponentView src -> (RenderState -> Signal src -> StateT (Model tgt) UI ()) -> Watcher UI tgt
asRoot :: Component UI a => ComponentView a -> SomeComponent
mainloop :: [SomeComponent] -> UI ()
rawGraphical :: ComponentView "raw" -> Graphical -> ComponentView "raw"
setClearColor :: Color -> UI ()
addWatchSignal :: Component UI tgt => ComponentView tgt -> Watcher UI tgt -> UI ()
quit :: UI ()
fromModel :: Component UI a => Model a -> UI (ComponentView a)
new :: Component UI a => ModelParam a -> UI (ComponentView a)
view :: (Component UI a) => ComponentView a -> UI Graphical
operateModel :: Component UI a => ComponentView a -> StateT (Model a) UI () -> UI ()
instance Graphics.UI.Refluxive.Component.Component Graphics.UI.Refluxive.UI "builtin"
instance Control.Monad.State.Class.MonadState Graphics.UI.Refluxive.UIState Graphics.UI.Refluxive.UI
instance Graphics.UI.Refluxive.Component.Component Graphics.UI.Refluxive.UI "raw"
instance Control.Monad.IO.Class.MonadIO Graphics.UI.Refluxive.UI
instance GHC.Base.Monad Graphics.UI.Refluxive.UI
instance GHC.Base.Applicative Graphics.UI.Refluxive.UI
instance GHC.Base.Functor Graphics.UI.Refluxive.UI
